/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "authorizeOnlyCreator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addMember(pay,address,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAsset()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setProposal(pay,address,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vote(bool,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "counter": {
          "type": "uint64",
          "key": "counter"
        },
        "registeredAssetCreated": {
          "type": "uint64",
          "key": "registeredAssetCreated"
        },
        "proposerAddress": {
          "type": "bytes",
          "key": "proposerAddress"
        },
        "proposerName": {
          "type": "bytes",
          "key": "proposerName"
        },
        "proposal": {
          "type": "bytes",
          "key": "proposal"
        },
        "totalVote": {
          "type": "uint64",
          "key": "totalVote"
        },
        "votesInFavor": {
          "type": "uint64",
          "key": "votesInFavor"
        },
        "votesAgainst": {
          "type": "uint64",
          "key": "votesAgainst"
        },
        "totalMembers": {
          "type": "uint64",
          "key": "totalMembers"
        },
        "executed": {
          "type": "bytes",
          "key": "executed"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DaoAccount",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "authorizeOnlyCreator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addMember",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "memberAddress",
            "type": "address"
          },
          {
            "name": "memberName",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAsset",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setProposal",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "proposerAddress",
            "type": "address"
          },
          {
            "name": "proposerName",
            "type": "string"
          },
          {
            "name": "proposal",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vote",
        "args": [
          {
            "name": "inFavor",
            "type": "bool"
          },
          {
            "name": "memberAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the DaoAccount smart contract.
 */
export type DaoAccount = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'authorizeOnlyCreator()void' | 'authorizeOnlyCreator', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'addMember(pay,address,string)void' | 'addMember', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        memberAddress: string
        memberName: string
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>, memberAddress: string, memberName: string]
      returns: void
    }>
    & Record<'getAsset()uint64' | 'getAsset', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'setProposal(pay,address,string,string)void' | 'setProposal', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
        proposerAddress: string
        proposerName: string
        proposal: string
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>, proposerAddress: string, proposerName: string, proposal: string]
      returns: void
    }>
    & Record<'vote(bool,address)void' | 'vote', {
      argsObj: {
        inFavor: boolean
        memberAddress: string
      }
      argsTuple: [inFavor: boolean, memberAddress: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      counter?: IntegerState
      registeredAssetCreated?: IntegerState
      proposerAddress?: BinaryState
      proposerName?: BinaryState
      proposal?: BinaryState
      totalVote?: IntegerState
      votesInFavor?: IntegerState
      votesAgainst?: IntegerState
      totalMembers?: IntegerState
      executed?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DaoAccountSig = keyof DaoAccount['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DaoAccountSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DaoAccount smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DaoAccountSig> = DaoAccount['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DaoAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DaoAccountSig> = DaoAccount['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DaoAccountCreateCalls = (typeof DaoAccountCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DaoAccountCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DaoAccountDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DaoAccountCreateCalls) => DaoAccountCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DaoAccountCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DaoAccount smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the authorizeOnlyCreator()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static authorizeOnlyCreator(args: MethodArgs<'authorizeOnlyCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'authorizeOnlyCreator()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addMember(pay,address,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addMember(args: MethodArgs<'addMember(pay,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addMember(pay,address,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay, args.memberAddress, args.memberName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAsset()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAsset(args: MethodArgs<'getAsset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAsset()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setProposal(pay,address,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setProposal(args: MethodArgs<'setProposal(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setProposal(pay,address,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay, args.proposerAddress, args.proposerName, args.proposal],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the vote(bool,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vote(args: MethodArgs<'vote(bool,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'vote(bool,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.inFavor, args.memberAddress],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DaoAccount smart contract
 */
export class DaoAccountClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DaoAccountClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DaoAccount['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DaoAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DaoAccountDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DaoAccountCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DaoAccount smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DaoAccountCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DaoAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the authorizeOnlyCreator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public authorizeOnlyCreator(args: MethodArgs<'authorizeOnlyCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoAccountCallFactory.authorizeOnlyCreator(args, params))
  }

  /**
   * Calls the addMember(pay,address,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addMember(args: MethodArgs<'addMember(pay,address,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoAccountCallFactory.addMember(args, params))
  }

  /**
   * Calls the getAsset()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAsset(args: MethodArgs<'getAsset()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoAccountCallFactory.getAsset(args, params))
  }

  /**
   * Calls the setProposal(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setProposal(args: MethodArgs<'setProposal(pay,address,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoAccountCallFactory.setProposal(args, params))
  }

  /**
   * Calls the vote(bool,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vote(args: MethodArgs<'vote(bool,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DaoAccountCallFactory.vote(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DaoAccount['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get counter() {
        return DaoAccountClient.getIntegerState(state, 'counter')
      },
      get registeredAssetCreated() {
        return DaoAccountClient.getIntegerState(state, 'registeredAssetCreated')
      },
      get proposerAddress() {
        return DaoAccountClient.getBinaryState(state, 'proposerAddress')
      },
      get proposerName() {
        return DaoAccountClient.getBinaryState(state, 'proposerName')
      },
      get proposal() {
        return DaoAccountClient.getBinaryState(state, 'proposal')
      },
      get totalVote() {
        return DaoAccountClient.getIntegerState(state, 'totalVote')
      },
      get votesInFavor() {
        return DaoAccountClient.getIntegerState(state, 'votesInFavor')
      },
      get votesAgainst() {
        return DaoAccountClient.getIntegerState(state, 'votesAgainst')
      },
      get totalMembers() {
        return DaoAccountClient.getIntegerState(state, 'totalMembers')
      },
      get executed() {
        return DaoAccountClient.getBinaryState(state, 'executed')
      },
    }
  }

  public compose(): DaoAccountComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      authorizeOnlyCreator(args: MethodArgs<'authorizeOnlyCreator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.authorizeOnlyCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addMember(args: MethodArgs<'addMember(pay,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addMember(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAsset(args: MethodArgs<'getAsset()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setProposal(args: MethodArgs<'setProposal(pay,address,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      vote(args: MethodArgs<'vote(bool,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.vote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DaoAccountComposer
  }
}
export type DaoAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the authorizeOnlyCreator()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  authorizeOnlyCreator(args: MethodArgs<'authorizeOnlyCreator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, MethodReturn<'authorizeOnlyCreator()void'>]>

  /**
   * Calls the addMember(pay,address,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addMember(args: MethodArgs<'addMember(pay,address,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, MethodReturn<'addMember(pay,address,string)void'>]>

  /**
   * Calls the getAsset()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAsset(args: MethodArgs<'getAsset()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, MethodReturn<'getAsset()uint64'>]>

  /**
   * Calls the setProposal(pay,address,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setProposal(args: MethodArgs<'setProposal(pay,address,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, MethodReturn<'setProposal(pay,address,string,string)void'>]>

  /**
   * Calls the vote(bool,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(args: MethodArgs<'vote(bool,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, MethodReturn<'vote(bool,address)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DaoAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DaoAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DaoAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DaoAccountComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DaoAccountComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DaoAccountComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DaoAccountComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
